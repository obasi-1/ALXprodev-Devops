>' and 'sed'">
```bash
#!/usr/bin/env bash

# This script generates a summary report for multiple Pokémon.
# It reads all JSON files, creates a CSV report by appending each line,
# and then calculates the average height and weight using awk.

# Define the directory containing the Pokémon JSON files.
DATA_DIR="pokemon_data"
# Define the output CSV file for the report.
OUTPUT_FILE="pokemon_report.csv"

# Check if the data directory exists and is not empty.
if [ ! -d "$DATA_DIR" ] || [ -z "$(ls -A "$DATA_DIR")" ]; then
  echo "Error: The '$DATA_DIR' directory does not exist or is empty. Please run the batch processing script first." >&2
  exit 1
fi

echo "Generating CSV Report at: $OUTPUT_FILE"

# Start the CSV file with the header, overwriting any previous content.
echo "Name,Height (m),Weight (kg)" > "$OUTPUT_FILE"

# Loop through all files ending with .json in the specified directory.
for file in "$DATA_DIR"/*.json; do
  # Check if a file was found (handle case where no .json files exist)
  if [ -e "$file" ]; then
    # Use jq to extract the required data and format it as a single CSV line.
    # The output is sorted to match the sample.
    jq -r --arg filename "$(basename "$file" .json)" '
      [
        .name,
        (.height / 10),
        (.weight / 10)
      ] | @csv
    ' "$file" | sed -E 's/^"([a-z])/\U\1/;s/,([a-z])/\U\1/' | sort -t ',' -k1 >> "$OUTPUT_FILE"
  fi
done

# The main awk script to process the data from the newly created CSV file.
# It skips the header and calculates the averages.
awk '
BEGIN {
  # Set the field separator to a comma for CSV processing.
  FS=","
  total_height = 0
  total_weight = 0
  count = 0
}
# Skip the header line.
NR > 1 {
  # Accumulate the total height and weight, and increment the count.
  total_height += $2
  total_weight += $3
  count++
}
END {
  # Calculate the averages.
  if (count > 0) {
    avg_height = total_height / count
    avg_weight = total_weight / count
  
    # Print the final averages in the required format to standard output.
    printf "\nAverage Height: %.2f m\n", avg_height
    printf "Average Weight: %.2f kg\n", avg_weight
  }
}
' "$OUTPUT_FILE"
```
