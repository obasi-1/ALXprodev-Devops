#!/usr/bin/env bash

# This script fetches data for a list of Pokémon in parallel using background processes.
# It ensures all background jobs complete before exiting.

# Define the list of Pokémon to fetch data for.
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Define the API base URL.
API_BASE_URL="https://pokeapi.co/api/v2/pokemon/"

# Define the directory to save the JSON files.
OUTPUT_DIR="pokemon_data_parallel"

# Check if the output directory exists, if not, create it.
if [ ! -d "$OUTPUT_DIR" ]; then
  mkdir -p "$OUTPUT_DIR"
  echo "Created directory: $OUTPUT_DIR"
fi

echo "Starting parallel data fetching for ${#POKEMON_LIST[@]} Pokémon..."

# Loop through the list of Pokémon and start a background process for each.
for pokemon in "${POKEMON_LIST[@]}"; do
  # Construct the full API URL and the output file path.
  API_URL="${API_BASE_URL}${pokemon}"
  JSON_FILE="${OUTPUT_DIR}/${pokemon}.json"

  # Define a function to perform the fetch operation.
  # This makes it easier to manage the background process and its output.
  fetch_pokemon() {
    local pokemon_name=$1
    local api_url=$2
    local output_file=$3

    # Make the API request using curl.
    # The -s flag is for silent mode, and -o specifies the output file.
    # The -f flag makes curl fail silently on HTTP errors.
    curl -s -f -o "$output_file" "$api_url"

    # Check the exit status of the curl command.
    if [ $? -eq 0 ]; then
      echo "✅ Fetched and saved data for $pokemon_name to $output_file"
    else
      echo "❌ Error: Failed to fetch data for $pokemon_name. Check the name or API URL." >&2
      rm -f "$output_file" # Remove the empty file created on failure
    fi
  }

  # Call the function in the background. The '&' symbol detaches the process.
  fetch_pokemon "$pokemon" "$API_URL" "$JSON_FILE" &

done

echo "All fetching jobs started. Waiting for them to complete..."

# The 'wait' command ensures the script pauses until all background
# processes associated with the current shell have finished.
wait

echo "All parallel fetching jobs are complete."
